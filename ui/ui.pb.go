// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opensnitch/ui/ui.proto

package opensnitch_ui

import (
	context "context"
	fmt "fmt"
	network "github.com/Northern-Lights/os-rules-engine/network"
	rules "github.com/Northern-Lights/os-rules-engine/rules"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingRequest struct {
	Id                   uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats                *Statistics `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb4b1933030d89, []int{0}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PingRequest) GetStats() *Statistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

type PingReply struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb4b1933030d89, []int{1}
}

func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReply.Unmarshal(m, b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
}
func (m *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(m, src)
}
func (m *PingReply) XXX_Size() int {
	return xxx_messageInfo_PingReply.Size(m)
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Statistics struct {
	DaemonVersion        string            `protobuf:"bytes,1,opt,name=daemon_version,json=daemonVersion,proto3" json:"daemon_version,omitempty"`
	Rules                uint64            `protobuf:"varint,2,opt,name=rules,proto3" json:"rules,omitempty"`
	Uptime               uint64            `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	DnsResponses         uint64            `protobuf:"varint,4,opt,name=dns_responses,json=dnsResponses,proto3" json:"dns_responses,omitempty"`
	Connections          uint64            `protobuf:"varint,5,opt,name=connections,proto3" json:"connections,omitempty"`
	Ignored              uint64            `protobuf:"varint,6,opt,name=ignored,proto3" json:"ignored,omitempty"`
	Accepted             uint64            `protobuf:"varint,7,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Dropped              uint64            `protobuf:"varint,8,opt,name=dropped,proto3" json:"dropped,omitempty"`
	RuleHits             uint64            `protobuf:"varint,9,opt,name=rule_hits,json=ruleHits,proto3" json:"rule_hits,omitempty"`
	RuleMisses           uint64            `protobuf:"varint,10,opt,name=rule_misses,json=ruleMisses,proto3" json:"rule_misses,omitempty"`
	ByProto              map[string]uint64 `protobuf:"bytes,11,rep,name=by_proto,json=byProto,proto3" json:"by_proto,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ByAddress            map[string]uint64 `protobuf:"bytes,12,rep,name=by_address,json=byAddress,proto3" json:"by_address,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ByHost               map[string]uint64 `protobuf:"bytes,13,rep,name=by_host,json=byHost,proto3" json:"by_host,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ByPort               map[string]uint64 `protobuf:"bytes,14,rep,name=by_port,json=byPort,proto3" json:"by_port,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ByUid                map[string]uint64 `protobuf:"bytes,15,rep,name=by_uid,json=byUid,proto3" json:"by_uid,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ByExecutable         map[string]uint64 `protobuf:"bytes,16,rep,name=by_executable,json=byExecutable,proto3" json:"by_executable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Events               []*Event          `protobuf:"bytes,17,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Statistics) Reset()         { *m = Statistics{} }
func (m *Statistics) String() string { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()    {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb4b1933030d89, []int{2}
}

func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statistics.Unmarshal(m, b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
}
func (m *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(m, src)
}
func (m *Statistics) XXX_Size() int {
	return xxx_messageInfo_Statistics.Size(m)
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetDaemonVersion() string {
	if m != nil {
		return m.DaemonVersion
	}
	return ""
}

func (m *Statistics) GetRules() uint64 {
	if m != nil {
		return m.Rules
	}
	return 0
}

func (m *Statistics) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Statistics) GetDnsResponses() uint64 {
	if m != nil {
		return m.DnsResponses
	}
	return 0
}

func (m *Statistics) GetConnections() uint64 {
	if m != nil {
		return m.Connections
	}
	return 0
}

func (m *Statistics) GetIgnored() uint64 {
	if m != nil {
		return m.Ignored
	}
	return 0
}

func (m *Statistics) GetAccepted() uint64 {
	if m != nil {
		return m.Accepted
	}
	return 0
}

func (m *Statistics) GetDropped() uint64 {
	if m != nil {
		return m.Dropped
	}
	return 0
}

func (m *Statistics) GetRuleHits() uint64 {
	if m != nil {
		return m.RuleHits
	}
	return 0
}

func (m *Statistics) GetRuleMisses() uint64 {
	if m != nil {
		return m.RuleMisses
	}
	return 0
}

func (m *Statistics) GetByProto() map[string]uint64 {
	if m != nil {
		return m.ByProto
	}
	return nil
}

func (m *Statistics) GetByAddress() map[string]uint64 {
	if m != nil {
		return m.ByAddress
	}
	return nil
}

func (m *Statistics) GetByHost() map[string]uint64 {
	if m != nil {
		return m.ByHost
	}
	return nil
}

func (m *Statistics) GetByPort() map[string]uint64 {
	if m != nil {
		return m.ByPort
	}
	return nil
}

func (m *Statistics) GetByUid() map[string]uint64 {
	if m != nil {
		return m.ByUid
	}
	return nil
}

func (m *Statistics) GetByExecutable() map[string]uint64 {
	if m != nil {
		return m.ByExecutable
	}
	return nil
}

func (m *Statistics) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Event struct {
	Time                 string              `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Connection           *network.Connection `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
	Rule                 *rules.Rule         `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_09cb4b1933030d89, []int{3}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Event) GetConnection() *network.Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *Event) GetRule() *rules.Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "opensnitch.ui.PingRequest")
	proto.RegisterType((*PingReply)(nil), "opensnitch.ui.PingReply")
	proto.RegisterType((*Statistics)(nil), "opensnitch.ui.Statistics")
	proto.RegisterMapType((map[string]uint64)(nil), "opensnitch.ui.Statistics.ByAddressEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "opensnitch.ui.Statistics.ByExecutableEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "opensnitch.ui.Statistics.ByHostEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "opensnitch.ui.Statistics.ByPortEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "opensnitch.ui.Statistics.ByProtoEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "opensnitch.ui.Statistics.ByUidEntry")
	proto.RegisterType((*Event)(nil), "opensnitch.ui.Event")
}

func init() { proto.RegisterFile("opensnitch/ui/ui.proto", fileDescriptor_09cb4b1933030d89) }

var fileDescriptor_09cb4b1933030d89 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x5d, 0xbb, 0x7e, 0xde, 0xb4, 0x65, 0xbb, 0x9a, 0x26, 0x93, 0x21, 0xa8, 0x0a, 0x43, 0x15,
	0xa0, 0x4e, 0x2a, 0x2f, 0x63, 0xa0, 0xa1, 0x31, 0x4d, 0x8c, 0x07, 0x50, 0x15, 0x34, 0x5e, 0xa3,
	0x26, 0xb6, 0x36, 0x6b, 0x9d, 0x1d, 0x62, 0x67, 0x90, 0x5f, 0x80, 0xf8, 0xab, 0xfc, 0x0a, 0x64,
	0xbb, 0x1f, 0xd9, 0x60, 0x9d, 0xfa, 0xd2, 0xfa, 0x9c, 0x7b, 0xce, 0xc9, 0x55, 0xae, 0x73, 0x61,
	0x5b, 0x26, 0x4c, 0x28, 0xc1, 0x75, 0x7c, 0xb1, 0x97, 0xf1, 0xbd, 0x8c, 0x0f, 0x92, 0x54, 0x6a,
	0x89, 0xed, 0x05, 0x3f, 0xc8, 0xb8, 0xdf, 0x2d, 0xc8, 0x04, 0xd3, 0x3f, 0x64, 0x7a, 0x39, 0xfb,
	0x77, 0x06, 0xff, 0x51, 0x41, 0x91, 0x66, 0x13, 0xa6, 0xdc, 0xaf, 0xab, 0xf6, 0xbe, 0x80, 0x37,
	0xe2, 0xe2, 0x3c, 0x60, 0xdf, 0x33, 0xa6, 0x34, 0x76, 0xa0, 0xcc, 0x29, 0x29, 0x75, 0x4b, 0xfd,
	0x4a, 0x50, 0xe6, 0x14, 0xf7, 0xa0, 0xaa, 0xf4, 0x58, 0x2b, 0x52, 0xee, 0x96, 0xfa, 0xde, 0xf0,
	0xe1, 0xe0, 0xc6, 0xd3, 0x07, 0x5f, 0xf5, 0x58, 0x73, 0xa5, 0x79, 0xac, 0x02, 0xa7, 0xeb, 0xed,
	0x40, 0xd3, 0xe5, 0x25, 0x93, 0xfc, 0x76, 0x5a, 0xef, 0x4f, 0x03, 0x60, 0x61, 0xc1, 0x5d, 0xe8,
	0xd0, 0x31, 0xbb, 0x92, 0x22, 0xbc, 0x66, 0xa9, 0xe2, 0x52, 0x58, 0x69, 0x33, 0x68, 0x3b, 0xf6,
	0x9b, 0x23, 0x71, 0x0b, 0xaa, 0xb6, 0x63, 0xdb, 0x43, 0x25, 0x70, 0x00, 0xb7, 0xa1, 0x96, 0x25,
	0x9a, 0x5f, 0x31, 0xb2, 0x6e, 0xe9, 0x29, 0xc2, 0xa7, 0xd0, 0xa6, 0x42, 0x85, 0x29, 0x53, 0x89,
	0x14, 0x8a, 0x29, 0x52, 0xb1, 0xe5, 0x16, 0x15, 0x2a, 0x98, 0x71, 0xd8, 0x05, 0x2f, 0x96, 0x42,
	0xb0, 0x58, 0x73, 0x29, 0x14, 0xa9, 0x5a, 0x49, 0x91, 0x42, 0x02, 0x75, 0x7e, 0x2e, 0x64, 0xca,
	0x28, 0xa9, 0xd9, 0xea, 0x0c, 0xa2, 0x0f, 0x8d, 0x71, 0x1c, 0xb3, 0x44, 0x33, 0x4a, 0xea, 0xb6,
	0x34, 0xc7, 0xc6, 0x45, 0x53, 0x99, 0x24, 0x8c, 0x92, 0x86, 0x73, 0x4d, 0x21, 0xee, 0x40, 0xd3,
	0xf4, 0x1d, 0x5e, 0x70, 0xad, 0x48, 0xd3, 0xd9, 0x0c, 0x71, 0xca, 0xb5, 0xc2, 0x27, 0xe0, 0xd9,
	0xe2, 0x15, 0x57, 0xa6, 0x63, 0xb0, 0x65, 0x30, 0xd4, 0x67, 0xcb, 0xe0, 0x11, 0x34, 0xa2, 0x3c,
	0xb4, 0x13, 0x23, 0x5e, 0x77, 0xbd, 0xef, 0x0d, 0x9f, 0xdf, 0x39, 0x89, 0xc1, 0x87, 0x7c, 0x64,
	0x84, 0x27, 0x42, 0xa7, 0x79, 0x50, 0x8f, 0x1c, 0xc2, 0x8f, 0x00, 0x51, 0x1e, 0x8e, 0x29, 0x4d,
	0x99, 0x52, 0xa4, 0x65, 0x43, 0xfa, 0xcb, 0x42, 0x8e, 0x9c, 0xd4, 0xc5, 0x34, 0xa3, 0x19, 0xc6,
	0x43, 0xa8, 0x47, 0x79, 0x78, 0x21, 0x95, 0x26, 0x6d, 0x9b, 0xb2, 0xbb, 0x2c, 0xe5, 0x54, 0x2a,
	0xed, 0x22, 0x6a, 0x91, 0x05, 0x53, 0x7f, 0x22, 0x53, 0x4d, 0x3a, 0xf7, 0xfb, 0x47, 0x32, 0x5d,
	0xf8, 0x0d, 0xc0, 0xb7, 0x50, 0x8b, 0xf2, 0x30, 0xe3, 0x94, 0x3c, 0xb0, 0xf6, 0x67, 0xcb, 0xec,
	0x67, 0x9c, 0x3a, 0x77, 0x35, 0x32, 0x67, 0x1c, 0x41, 0x3b, 0xca, 0x43, 0xf6, 0x93, 0xc5, 0x99,
	0x1e, 0x47, 0x13, 0x46, 0x36, 0x6c, 0xc6, 0xcb, 0x65, 0x19, 0x27, 0x73, 0xb5, 0x8b, 0x6a, 0x45,
	0x05, 0x0a, 0x5f, 0x41, 0x8d, 0x5d, 0x33, 0xa1, 0x15, 0xd9, 0xb4, 0x51, 0x5b, 0xb7, 0xa2, 0x4e,
	0x4c, 0x31, 0x98, 0x6a, 0xfc, 0x03, 0x68, 0x15, 0xc7, 0x83, 0x1b, 0xb0, 0x7e, 0xc9, 0xf2, 0xe9,
	0xbd, 0x37, 0x47, 0x73, 0xdb, 0xaf, 0xc7, 0x93, 0x8c, 0xcd, 0x6e, 0xbb, 0x05, 0x07, 0xe5, 0xfd,
	0x92, 0xff, 0x0e, 0x3a, 0x37, 0xa7, 0xb2, 0x92, 0xfb, 0x0d, 0x78, 0x85, 0x69, 0xac, 0x6e, 0x9d,
	0x0f, 0x62, 0x25, 0xeb, 0x3e, 0xc0, 0x62, 0x08, 0x2b, 0x39, 0xdf, 0xc3, 0xe6, 0x3f, 0xaf, 0x7e,
	0x95, 0x80, 0xde, 0xaf, 0x12, 0x54, 0xed, 0xcb, 0x47, 0x84, 0x8a, 0x5d, 0x14, 0xce, 0x66, 0xcf,
	0x78, 0x08, 0xb0, 0xf8, 0xdc, 0xa7, 0xdb, 0xed, 0x71, 0x71, 0x74, 0xb3, 0x25, 0x7a, 0x3c, 0x57,
	0x05, 0x05, 0x07, 0xbe, 0x80, 0x8a, 0xf9, 0x3e, 0xed, 0xf2, 0xf1, 0x86, 0xdb, 0x45, 0xa7, 0x5b,
	0xaf, 0x41, 0x36, 0x61, 0x81, 0xd5, 0x0c, 0x7f, 0x97, 0xa0, 0x7c, 0xf6, 0x09, 0x0f, 0xa1, 0x62,
	0x56, 0x23, 0xfa, 0xb7, 0x6e, 0x48, 0x61, 0xff, 0xfa, 0xe4, 0xbf, 0xb5, 0x64, 0x92, 0xf7, 0xd6,
	0xf0, 0x18, 0xea, 0x47, 0xea, 0xd2, 0xe4, 0xe2, 0x3d, 0x9d, 0xfa, 0x77, 0xf4, 0xd3, 0x5b, 0x8b,
	0x6a, 0x76, 0x89, 0xbc, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x1b, 0x1b, 0x6d, 0x5f, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UIClient is the client API for UI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UIClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	AskRule(ctx context.Context, in *network.Connection, opts ...grpc.CallOption) (*rules.Rule, error)
}

type uIClient struct {
	cc *grpc.ClientConn
}

func NewUIClient(cc *grpc.ClientConn) UIClient {
	return &uIClient{cc}
}

func (c *uIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/opensnitch.ui.UI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) AskRule(ctx context.Context, in *network.Connection, opts ...grpc.CallOption) (*rules.Rule, error) {
	out := new(rules.Rule)
	err := c.cc.Invoke(ctx, "/opensnitch.ui.UI/AskRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UIServer is the server API for UI service.
type UIServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	AskRule(context.Context, *network.Connection) (*rules.Rule, error)
}

func RegisterUIServer(s *grpc.Server, srv UIServer) {
	s.RegisterService(&_UI_serviceDesc, srv)
}

func _UI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensnitch.ui.UI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_AskRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).AskRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensnitch.ui.UI/AskRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).AskRule(ctx, req.(*network.Connection))
	}
	return interceptor(ctx, in, info, handler)
}

var _UI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opensnitch.ui.UI",
	HandlerType: (*UIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UI_Ping_Handler,
		},
		{
			MethodName: "AskRule",
			Handler:    _UI_AskRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opensnitch/ui/ui.proto",
}
